name: "Reusable Base"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      is_main_pipeline:
        description: "Whether this is a Main (Non-PR) Pipeline"
        required: false
        type: boolean

jobs:
  PrintJob-1:
    runs-on: ubuntu-latest
    steps:
      - name: Print Something
        run: |
          echo "Printing from Job-1"
      - name: Apply Changes
        if: ${{ inputs.is_main_pipeline }}
        run: |
          echo "Applying changes (only run for Main)"

  PrintJob-2:
    needs:
      - PrintJob-1
    runs-on: ubuntu-latest
    steps:
      - name: Print Something
        run: |
          echo "Hello from the Base. Is-Main-Pipeline: ${{ inputs.is_main_pipeline }}"
      - name: Apply Changes
        if: ${{ inputs.is_main_pipeline }}
        run: |
          echo "Applying changes (only run for Main)"

  PrintJob-3:
    if: ${{ inputs.is_main_pipeline }}
    needs:
      - PrintJob-2
    runs-on: ubuntu-latest
    steps:
      - name: Print Something
        run: |
          echo "Hello from the Base. Is-Main-Pipeline: ${{ inputs.is_main_pipeline }}"
      - name: Apply Changes
        if: ${{ inputs.is_main_pipeline }}
        run: |
          echo "Applying changes (only run for Main)

  NotifyFailure:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs:
      - PrintJob-3
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    steps:
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ join(needs.*.result, ',') }}\nLine-2 from text",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ join(needs.*.result, ',') }}\nWorkflow: $GITHUB_WORKFLOW"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
